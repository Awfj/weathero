{"version":3,"sources":["components/layout/Footer/Footer.module.scss","components/weather/Form/Form.module.scss","components/weather/Form/Form.js","components/weather/Result/Result.js","components/layout/Footer/Footer.js","containers/App.js","serviceWorker.js","index.js","components/weather/Result/Result.module.scss"],"names":["module","exports","Footer","Form","service","changeServiceBtn","getWeatherBtn","hint","form","props","react_default","a","createElement","name","onSubmit","getWeather","className","classes","currentService","type","title","onClick","changeService","react_fontawesome_index_es","icon","placeholder","result","changeCityBtn","city","toLowerCase","localStorage","getItem","changeCity","Result","country","temperature","humidity","description","requestDate","error","footer","target","rel","href","OPENWEATHERMAP_KEY","process","APIXU_KEY","library","add","fas","App","state","services","undefined","requestDateInMs","initialSetup","storedService","storedCity","_this","setState","fixRefreshedState","updateLocalStorage","findLocation","storedWeather","concat","updateState","split","axios","get","then","response","data","latitude","longitude","catch","event","_len2","arguments","length","args","Array","_key2","preventDefault","searchedCity","handleInputValue","getStoredWeather","url","isAPIXU","cityFromResponse","location","setItem","setRequestedData","current","temp_c","condition","text","sys","main","temp","weather","String","Date","getTime","_len3","_key3","toUpperCase","slice","storedData","_storedData","Object","slicedToArray","this","key","currentDateInMs","removeItem","document","forms","searchForm","value","trim","Component","Boolean","window","hostname","match","ReactDOM","render","containers_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2a5add12.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Footer\":\"Footer_Footer__2C0ji\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"Form_Form__2iU2U\",\"service\":\"Form_service__DQOsq\",\"changeServiceBtn\":\"Form_changeServiceBtn__36gx9\",\"getWeatherBtn\":\"Form_getWeatherBtn__13Sw-\",\"hint\":\"Form_hint__7mAWw\"};","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport classes from \"./Form.module.scss\";\r\n\r\nconst form = props => {\r\n  return (\r\n    <form\r\n      name=\"searchForm\"\r\n      onSubmit={props.getWeather}\r\n      className={classes.Form}\r\n    >\r\n      <p className={classes.service}>\r\n        Service: {props.currentService}\r\n        <button\r\n          type=\"button\"\r\n          title=\"Change service\"\r\n          className={classes.changeServiceBtn}\r\n          onClick={props.changeService}\r\n        >\r\n          <FontAwesomeIcon icon={[\"fas\", \"exchange-alt\"]} />\r\n        </button>\r\n      </p>\r\n      <div>\r\n        <input type=\"text\" name=\"city\" placeholder=\"Type a city name...\" />\r\n        <button type=\"submit\" className={classes.getWeatherBtn}>\r\n          Get Weather\r\n        </button>\r\n      </div>\r\n      <p className={classes.hint}>\r\n        It is advised to enter a full name of the city (e.g. Los Angeles, not\r\n        LA)\r\n      </p>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default form;\r\n","import React from \"react\";\r\n\r\nimport classes from \"./Result.module.scss\";\r\n\r\nconst result = props => {\r\n  const searchedCity = props.city ? props.city.toLowerCase() : props.city;\r\n  const storedCity = localStorage.getItem(\"city\");\r\n  const changeCityBtn =\r\n    searchedCity !== storedCity ? (\r\n      <button\r\n        type=\"button\"\r\n        className={classes.changeCityBtn}\r\n        onClick={props.changeCity}\r\n      >\r\n        Make Default\r\n      </button>\r\n    ) : null;\r\n\r\n  return (\r\n    <div className={classes.Result}>\r\n      <hr />\r\n      {props.city && (\r\n        <p>\r\n          Location: {props.city}, {props.country} {changeCityBtn}\r\n        </p>\r\n      )}\r\n      {props.temperature && <p>Temperature: {props.temperature}&#8451;</p>}\r\n      {props.humidity && <p>Humidity: {props.humidity}%</p>}\r\n      {props.description && <p>Condition: {props.description}</p>}\r\n      {props.requestDate && (\r\n        <div>\r\n          <hr />\r\n          <p>\r\n            The weather was requested on {props.requestDate}. It can be updated\r\n            after 2 hours since the request was made.\r\n          </p>\r\n        </div>\r\n      )}\r\n      {props.error && <p>{props.error}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default result;\r\n","import React from \"react\";\r\n\r\nimport classes from \"./Footer.module.scss\";\r\n\r\nconst footer = () => {\r\n  return (\r\n    <footer className={classes.Footer}>\r\n      <p>\r\n        By{\" \"}\r\n        <a\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          href=\"https://github.com/Awfj\"\r\n        >\r\n          github.com/Awfj\r\n        </a>\r\n      </p>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default footer;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport \"./App.modules.scss\";\r\nimport Form from \"../components/weather/Form/Form\";\r\nimport Result from \"../components/weather/Result/Result\";\r\nimport Footer from \"../components/layout/Footer/Footer\";\r\n\r\nconst OPENWEATHERMAP_KEY = process.env.REACT_APP_OPENWEATHERMAP_KEY;\r\nconst APIXU_KEY = process.env.REACT_APP_APIXU_KEY;\r\nlibrary.add(fas);\r\n\r\nclass App extends Component {\r\n  state = {\r\n    services: [\"OpenWeatherMap\", \"APIXU\"],\r\n    currentService: \"OpenWeatherMap\",\r\n    city: undefined,\r\n    country: undefined,\r\n    temperature: undefined,\r\n    humidity: undefined,\r\n    description: undefined,\r\n    requestDate: undefined,\r\n    requestDateInMs: undefined,\r\n    error: undefined\r\n  };\r\n  componentDidMount() {\r\n    this.initialSetup();\r\n  }\r\n\r\n  initialSetup = () => {\r\n    const storedService = localStorage.getItem(\"service\");\r\n    const storedCity = localStorage.getItem(\"city\");\r\n\r\n    if (storedService && this.state.currentService !== storedService)\r\n      this.setState({ currentService: storedService });\r\n\r\n    if (storedService && storedCity) {\r\n      this.fixRefreshedState();\r\n      this.updateLocalStorage();\r\n    } else {\r\n      this.findLocation();\r\n    }\r\n  };\r\n\r\n  // if service and location are stored and app is reloaded\r\n  fixRefreshedState = () => {\r\n    const storedService = localStorage.getItem(\"service\");\r\n    const storedCity = localStorage.getItem(\"city\");\r\n    const storedWeather = localStorage.getItem(\r\n      `${storedService}, ${storedCity}`\r\n    );\r\n\r\n    if (storedWeather) {\r\n      this.updateState(storedWeather.split(\",\"));\r\n    } else {\r\n      this.getWeather(\"\", storedCity);\r\n    }\r\n  };\r\n\r\n  // if service and location are stored, removes expired data\r\n  updateLocalStorage() {\r\n    const storedService = localStorage.getItem(\"service\");\r\n    const storedCity = localStorage.getItem(\"city\");\r\n\r\n    for (let key in localStorage) {\r\n      if (typeof localStorage[key] === \"string\") {\r\n        const storedData = localStorage[key].split(\",\");\r\n        const currentDateInMs = new Date().getTime();\r\n        const expirationDateInMs = 7.2e6;\r\n        if (\r\n          storedData[7] &&\r\n          currentDateInMs - storedData[7] > expirationDateInMs\r\n        ) {\r\n          if (`${storedService}, ${storedCity}` !== key) {\r\n            localStorage.removeItem(key);\r\n          } else {\r\n            this.getWeather(\"\", storedCity, true);\r\n          }\r\n        } else {\r\n          continue;\r\n        }\r\n      } else {\r\n        continue;\r\n      }\r\n    }\r\n  }\r\n\r\n  // if service and location aren't stored\r\n  findLocation = () => {\r\n    axios\r\n      .get(`https://get.geojs.io/v1/ip/geo.json`)\r\n      .then(response => {\r\n        this.getWeather(\"\", response.data.latitude, response.data.longitude);\r\n      })\r\n      .catch(() => {\r\n        this.setState({\r\n          error:\r\n            \"We couldn't find your city automatically, you can still look for it manually.\"\r\n        });\r\n      });\r\n  };\r\n\r\n  getWeather = (event, ...args) => {\r\n    if (event) event.preventDefault();\r\n\r\n    let searchedCity = this.handleInputValue();\r\n    const storedWeather = localStorage.getItem(\r\n      `${this.state.currentService}, ${searchedCity}`\r\n    );\r\n\r\n    if (!storedWeather) {\r\n      const storedService = localStorage.getItem(\"service\");\r\n      const storedCity = localStorage.getItem(\"city\");\r\n\r\n      if (storedService && storedCity && args[0]) {\r\n        searchedCity = args[0];\r\n      }\r\n\r\n      let url = `https://api.openweathermap.org/data/2.5/weather?q=${searchedCity}&appid=${OPENWEATHERMAP_KEY}&units=metric`;\r\n\r\n      if (!(storedService && storedCity) && !this.state.error) {\r\n        const latitude = args[0];\r\n        const longitude = args[1];\r\n        url = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${OPENWEATHERMAP_KEY}&units=metric`;\r\n      }\r\n\r\n      const isAPIXU = this.state.currentService === \"APIXU\";\r\n      if (isAPIXU) {\r\n        url = `https://api.apixu.com/v1/current.json?key=${APIXU_KEY}&q=${searchedCity}`;\r\n      }\r\n\r\n      axios\r\n        .get(url)\r\n        .then(response => {\r\n          if (isAPIXU) {\r\n            const cityFromResponse = response.data.location.name.toLowerCase();\r\n\r\n            if (!(storedService && storedCity) && this.state.error) {\r\n              localStorage.setItem(\"service\", this.state.currentService);\r\n              localStorage.setItem(\"city\", cityFromResponse);\r\n            }\r\n\r\n            const requestedCityWeather = localStorage.getItem(\r\n              `${this.state.currentService}, ${cityFromResponse}`\r\n            );\r\n            if (!requestedCityWeather || typeof args[1] === \"boolean\") {\r\n              this.setRequestedData(\r\n                response.data.location.name,\r\n                response.data.location.country,\r\n                response.data.current.temp_c,\r\n                response.data.current.humidity,\r\n                response.data.current.condition.text\r\n              );\r\n            } else {\r\n              this.getStoredWeather(cityFromResponse);\r\n            }\r\n          } else {\r\n            const cityFromResponse = response.data.name.toLowerCase();\r\n\r\n            if (!(storedService && storedCity)) {\r\n              localStorage.setItem(\"service\", this.state.currentService);\r\n              localStorage.setItem(\"city\", cityFromResponse);\r\n            }\r\n\r\n            const requestedCityWeather = localStorage.getItem(\r\n              `${this.state.currentService}, ${cityFromResponse}`\r\n            );\r\n\r\n            if (!requestedCityWeather || typeof args[1] === \"boolean\") {\r\n              this.setRequestedData(\r\n                response.data.name,\r\n                response.data.sys.country,\r\n                response.data.main.temp,\r\n                response.data.main.humidity,\r\n                response.data.weather[0].description\r\n              );\r\n            } else {\r\n              this.getStoredWeather(cityFromResponse);\r\n            }\r\n          }\r\n        })\r\n        .catch(() => {\r\n          this.setState({\r\n            city: undefined,\r\n            country: undefined,\r\n            temperature: undefined,\r\n            humidity: undefined,\r\n            description: undefined,\r\n            requestDate: undefined,\r\n            requestDateInMs: undefined,\r\n            error:\r\n              \"Requested city can't be found. Please, check if the name is correct, change service or try again later.\"\r\n          });\r\n        });\r\n    } else {\r\n      this.getStoredWeather();\r\n    }\r\n  };\r\n\r\n  setRequestedData = (...args) => {\r\n    const requestDate = String(new Date());\r\n    const requestDateInMs = new Date().getTime();\r\n\r\n    let description = args[4];\r\n    if (args[4] === args[4].toLowerCase()) {\r\n      description = args[4][0].toUpperCase() + args[4].slice(1);\r\n    }\r\n\r\n    this.setState({\r\n      city: args[0],\r\n      country: args[1],\r\n      temperature: args[2],\r\n      humidity: args[3],\r\n      description,\r\n      requestDate,\r\n      requestDateInMs,\r\n      error: undefined\r\n    });\r\n\r\n    localStorage.setItem(\r\n      `${this.state.currentService}, ${args[0].toLowerCase()}`,\r\n      [\r\n        this.state.currentService,\r\n        args[0],\r\n        args[1],\r\n        args[2],\r\n        args[3],\r\n        description,\r\n        requestDate,\r\n        requestDateInMs\r\n      ]\r\n    );\r\n  };\r\n\r\n  getStoredWeather = cityFromResponse => {\r\n    let storedWeather;\r\n\r\n    if (!cityFromResponse) {\r\n      const searchedCity = this.handleInputValue();\r\n      storedWeather = localStorage\r\n        .getItem(`${this.state.currentService}, ${searchedCity}`)\r\n        .split(\",\");\r\n    } else {\r\n      storedWeather = localStorage\r\n        .getItem(`${this.state.currentService}, ${cityFromResponse}`)\r\n        .split(\",\");\r\n    }\r\n\r\n    this.updateState(storedWeather);\r\n  };\r\n\r\n  updateState = storedData => {\r\n    const [\r\n      currentService,\r\n      city,\r\n      country,\r\n      temperature,\r\n      humidity,\r\n      description,\r\n      requestDate,\r\n      requestDateInMs\r\n    ] = storedData;\r\n\r\n    this.setState({\r\n      currentService,\r\n      city,\r\n      country,\r\n      temperature,\r\n      humidity,\r\n      description,\r\n      requestDate,\r\n      requestDateInMs,\r\n      error: undefined\r\n    });\r\n  };\r\n\r\n  handleInputValue() {\r\n    const searchedCity = document.forms.searchForm.city.value\r\n      .trim()\r\n      .toLowerCase();\r\n\r\n    return searchedCity;\r\n  }\r\n\r\n  changeService = () => {\r\n    const currentService =\r\n      this.state.currentService === this.state.services[0]\r\n        ? this.state.services[1]\r\n        : this.state.services[0];\r\n\r\n    localStorage.setItem(\"service\", currentService);\r\n\r\n    this.setState({ currentService });\r\n  };\r\n\r\n  changeCity = () => {\r\n    localStorage.setItem(\"city\", this.state.city.toLowerCase());\r\n    this.setState(this.state);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header>\r\n          <h1>Weathero</h1>\r\n        </header>\r\n\r\n        <main>\r\n          <Form\r\n            getWeather={this.getWeather}\r\n            currentService={this.state.currentService}\r\n            changeService={this.changeService}\r\n          />\r\n\r\n          <Result\r\n            city={this.state.city}\r\n            country={this.state.country}\r\n            changeCity={this.changeCity}\r\n            temperature={this.state.temperature}\r\n            humidity={this.state.humidity}\r\n            description={this.state.description}\r\n            requestDate={this.state.requestDate}\r\n            error={this.state.error}\r\n          />\r\n        </main>\r\n\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Result\":\"Result_Result__8DFfA\",\"changeCityBtn\":\"Result_changeCityBtn__1dLYR\"};"],"sourceRoot":""}