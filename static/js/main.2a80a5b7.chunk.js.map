{"version":3,"sources":["components/layout/Footer/Footer.module.scss","components/weather/Form/Form.module.scss","components/weather/Form/Form.js","components/weather/Result/Result.js","components/layout/Footer/Footer.js","containers/App/App.js","serviceWorker.js","index.js","components/weather/Result/Result.module.scss"],"names":["module","exports","Footer","Form","service","changeServiceBtn","getWeatherBtn","hint","form","props","react_default","a","createElement","name","className","classes","onSubmit","manualWeatherRequest","currentService","type","title","onClick","changeService","react_fontawesome_index_es","icon","placeholder","result","changeCityBtn","city","toLowerCase","localStorage","getItem","changeCity","Result","country","temperature","humidity","description","fullRequestDate","error","footer","target","rel","href","OPENWEATHERMAP_KEY","process","library","add","fas","App","state","services","undefined","requestDate","initialSetup","_this","setState","fixState","updateStorage","findLocation","axios","get","then","response","autoWeatherRequest","data","latitude","longitude","catch","storedWeather","concat","updateState","storedCity","coordinates","url","chooseURL","getWeather","event","preventDefault","inputValue","document","forms","searchForm","value","trim","searchedCity","checkIfExpired","split","weather","lookForVariation","isAltService","setWeather","location","current","temp_c","condition","text","sys","main","temp","isServiceStored","Boolean","isCityStored","_len2","arguments","length","responseData","Array","_key2","receivedCity","setItem","String","Date","getTime","toUpperCase","slice","addVariation","slicedWeather","this","key","removeItem","variations","index","indexOf","Component","window","hostname","match","ReactDOM","render","containers_App_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2a80a5b7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Footer\":\"Footer_Footer__2C0ji\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"Form_Form__2iU2U\",\"service\":\"Form_service__DQOsq\",\"changeServiceBtn\":\"Form_changeServiceBtn__36gx9\",\"getWeatherBtn\":\"Form_getWeatherBtn__13Sw-\",\"hint\":\"Form_hint__7mAWw\"};","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport classes from \"./Form.module.scss\";\r\n\r\nconst form = props => {\r\n  return (\r\n    <form\r\n      name=\"searchForm\"\r\n      className={classes.Form}\r\n      onSubmit={props.manualWeatherRequest}\r\n    >\r\n      <p className={classes.service}>\r\n        Service: {props.currentService}\r\n        <button\r\n          type=\"button\"\r\n          title=\"Change service\"\r\n          className={classes.changeServiceBtn}\r\n          onClick={props.changeService}\r\n        >\r\n          <FontAwesomeIcon icon={[\"fas\", \"exchange-alt\"]} />\r\n        </button>\r\n      </p>\r\n      <div>\r\n        <input type=\"text\" name=\"city\" placeholder=\"Type a city name...\" />\r\n        <button type=\"submit\" className={classes.getWeatherBtn}>\r\n          Get Weather\r\n        </button>\r\n      </div>\r\n      <p className={classes.hint}>\r\n        It is advised to enter a full name of the city (e.g. Los Angeles, not\r\n        LA)\r\n      </p>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default form;\r\n","import React from \"react\";\r\n\r\nimport classes from \"./Result.module.scss\";\r\n\r\nconst result = props => {\r\n  const searchedCity = props.city ? props.city.toLowerCase() : props.city;\r\n  const storedCity = localStorage.getItem(\"city\");\r\n  const changeCityBtn =\r\n    searchedCity !== storedCity ? (\r\n      <button\r\n        type=\"button\"\r\n        className={classes.changeCityBtn}\r\n        onClick={props.changeCity}\r\n      >\r\n        Make Default\r\n      </button>\r\n    ) : null;\r\n\r\n  return (\r\n    <div className={classes.Result}>\r\n      <hr />\r\n      {props.city && (\r\n        <p>\r\n          Location: {props.city}, {props.country} {changeCityBtn}\r\n        </p>\r\n      )}\r\n      {props.temperature && <p>Temperature: {props.temperature}&#8451;</p>}\r\n      {props.humidity && <p>Humidity: {props.humidity}%</p>}\r\n      {props.description && <p>Condition: {props.description}</p>}\r\n      {props.fullRequestDate && (\r\n        <div>\r\n          <hr />\r\n          <p>\r\n            The weather was requested on {props.fullRequestDate}. It can be updated\r\n            after 2 hours since the request was made.\r\n          </p>\r\n        </div>\r\n      )}\r\n      {props.error && <p>{props.error}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default result;\r\n","import React from \"react\";\r\n\r\nimport classes from \"./Footer.module.scss\";\r\n\r\nconst footer = () => {\r\n  return (\r\n    <footer className={classes.Footer}>\r\n      <p>\r\n        By{\" \"}\r\n        <a\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          href=\"https://github.com/Awfj\"\r\n        >\r\n          github.com/Awfj\r\n        </a>\r\n      </p>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default footer;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport \"./App.modules.scss\";\r\nimport Form from \"../../components/weather/Form/Form\";\r\nimport Result from \"../../components/weather/Result/Result\";\r\nimport Footer from \"../../components/layout/Footer/Footer\";\r\n\r\nconst OPENWEATHERMAP_KEY = process.env.REACT_APP_OPENWEATHERMAP_KEY;\r\nconst APIXU_KEY = process.env.REACT_APP_APIXU_KEY;\r\nlibrary.add(fas);\r\n\r\nclass App extends Component {\r\n  state = {\r\n    services: [\"OpenWeatherMap\", \"APIXU\"],\r\n    currentService: \"OpenWeatherMap\",\r\n    city: undefined,\r\n    country: undefined,\r\n    temperature: undefined,\r\n    humidity: undefined,\r\n    description: undefined,\r\n    fullRequestDate: undefined,\r\n    requestDate: undefined,\r\n    error: undefined\r\n  };\r\n  componentDidMount() {\r\n    this.initialSetup();\r\n  }\r\n\r\n  initialSetup = () => {\r\n    const service = localStorage.getItem(\"service\");\r\n    const city = localStorage.getItem(\"city\");\r\n\r\n    if (service && this.state.currentService !== service)\r\n      this.setState({ currentService: service });\r\n\r\n    if (service && city) {\r\n      this.fixState(service, city);\r\n      this.updateStorage(service, city);\r\n    } else {\r\n      this.findLocation();\r\n    }\r\n  };\r\n\r\n  // if service and location aren't stored\r\n  findLocation = () => {\r\n    axios\r\n      .get(`https://get.geojs.io/v1/ip/geo.json`)\r\n      .then(response => {\r\n        this.autoWeatherRequest(null, [\r\n          response.data.latitude,\r\n          response.data.longitude\r\n        ]);\r\n      })\r\n      .catch(() => {\r\n        this.setState({\r\n          error: `We couldn't find your city automatically, \r\n            you can still look for it manually.`\r\n        });\r\n      });\r\n  };\r\n\r\n  // if service and location are stored and app is reloaded\r\n  fixState = (service, city) => {\r\n    const storedWeather = localStorage.getItem(`${service}, ${city}`);\r\n\r\n    if (storedWeather) {\r\n      this.updateState(storedWeather);\r\n    } else {\r\n      this.autoWeatherRequest(city);\r\n    }\r\n  };\r\n\r\n  // if service and location are stored, removes expired data\r\n  updateStorage(service, city) {\r\n    for (let key in localStorage) {\r\n      if (typeof localStorage[key] === \"string\") {\r\n        const storedWeather = localStorage[key].split(\",\");\r\n\r\n        if (storedWeather[7] && this.checkIfExpired(storedWeather[7])) {\r\n          if (`${service}, ${city}` !== key) {\r\n            localStorage.removeItem(key);\r\n          } else {\r\n            this.autoWeatherRequest(city);\r\n          }\r\n        } else continue;\r\n      } else continue;\r\n    }\r\n  }\r\n\r\n  // when app is reloaded\r\n  autoWeatherRequest = (storedCity, coordinates) => {\r\n    let url = \"\";\r\n\r\n    if (coordinates) {\r\n      url = `https://api.openweathermap.org/data/2.5/weather?lat=${\r\n        coordinates[0]\r\n      }&lon=${coordinates[1]}&appid=${OPENWEATHERMAP_KEY}&units=metric`;\r\n    } else {\r\n      url = this.chooseURL(storedCity);\r\n    }\r\n    this.getWeather(url);\r\n  };\r\n\r\n  manualWeatherRequest = event => {\r\n    event.preventDefault();\r\n\r\n    const inputValue = document.forms.searchForm.city.value.trim();\r\n    if (!inputValue) return;\r\n\r\n    const currentService = this.state.currentService;\r\n    const searchedCity = inputValue.toLowerCase();\r\n    const storedWeather = localStorage.getItem(\r\n      `${currentService}, ${searchedCity}`\r\n    );\r\n\r\n    if (!storedWeather || this.checkIfExpired(storedWeather.split(\",\")[7])) {\r\n      const weather = this.lookForVariation(currentService, searchedCity);\r\n      if (weather && !this.checkIfExpired(weather.split(\",\")[7])) {\r\n        this.updateState(weather);\r\n      } else {\r\n        const url = this.chooseURL(searchedCity);\r\n        this.getWeather(url);\r\n      }\r\n    } else {\r\n      this.updateState(storedWeather);\r\n    }\r\n  };\r\n\r\n  lookForVariation(service, city) {\r\n    for (let key in localStorage) {\r\n      if (typeof localStorage[key] === \"string\") {\r\n        const weather = localStorage[key].split(\",\");\r\n        if (weather.length > 8 && weather[0] === service) {\r\n          const variations = weather.slice(8);\r\n          const index = variations.indexOf(city);\r\n\r\n          if (index !== -1 && variations[index].length === city.length) {\r\n            return localStorage.getItem(\r\n              `${service}, ${weather[1].toLowerCase()}`\r\n            );\r\n          } else continue;\r\n        } else continue;\r\n      } else continue;\r\n    }\r\n  }\r\n\r\n  checkIfExpired(requestDate) {\r\n    const currentDate = new Date().getTime();\r\n    const expirationDate = 7.2e6;\r\n    const isExpired = currentDate - requestDate > expirationDate;\r\n\r\n    return isExpired;\r\n  }\r\n\r\n  chooseURL(searchedCity) {\r\n    let url = `https://api.openweathermap.org/data/2.5/weather?q=${searchedCity}&appid=${OPENWEATHERMAP_KEY}&units=metric`;\r\n\r\n    if (this.state.currentService === \"APIXU\") {\r\n      url = `https://api.apixu.com/v1/current.json?key=${APIXU_KEY}&q=${searchedCity}`;\r\n    }\r\n\r\n    return url;\r\n  }\r\n\r\n  getWeather = url => {\r\n    const isAltService = this.state.currentService !== this.state.services[0];\r\n\r\n    axios\r\n      .get(url)\r\n      .then(response => {\r\n        if (isAltService) {\r\n          this.setWeather(\r\n            response.data.location.name,\r\n            response.data.location.country,\r\n            response.data.current.temp_c,\r\n            response.data.current.humidity,\r\n            response.data.current.condition.text\r\n          );\r\n        } else {\r\n          this.setWeather(\r\n            response.data.name,\r\n            response.data.sys.country,\r\n            response.data.main.temp,\r\n            response.data.main.humidity,\r\n            response.data.weather[0].description\r\n          );\r\n        }\r\n      })\r\n      .catch(() => {\r\n        this.setState({\r\n          city: undefined,\r\n          country: undefined,\r\n          temperature: undefined,\r\n          humidity: undefined,\r\n          description: undefined,\r\n          fullRequestDate: undefined,\r\n          requestDate: undefined,\r\n          error: `Requested city can't be found. Please, check if the name \r\n            is correct, change service or try again later.`\r\n        });\r\n      });\r\n  };\r\n\r\n  setWeather = (...responseData) => {\r\n    const isServiceStored = Boolean(localStorage.getItem(\"service\"));\r\n    const isCityStored = Boolean(localStorage.getItem(\"city\"));\r\n    const currentService = this.state.currentService;\r\n    const receivedCity = responseData[0].toLowerCase();\r\n    const storedWeather = localStorage.getItem(\r\n      `${currentService}, ${receivedCity}`\r\n    );\r\n\r\n    if (!storedWeather || this.checkIfExpired(storedWeather.split(\",\")[7])) {\r\n      if (!(isServiceStored && isCityStored)) {\r\n        localStorage.setItem(\"service\", currentService);\r\n        localStorage.setItem(\"city\", receivedCity);\r\n      }\r\n\r\n      const fullRequestDate = String(new Date());\r\n      const requestDate = new Date().getTime();\r\n\r\n      let description = responseData[4];\r\n      if (responseData[4] === responseData[4].toLowerCase()) {\r\n        description =\r\n          responseData[4][0].toUpperCase() + responseData[4].slice(1);\r\n      }\r\n\r\n      this.setState({\r\n        city: responseData[0],\r\n        country: responseData[1],\r\n        temperature: responseData[2],\r\n        humidity: responseData[3],\r\n        description,\r\n        fullRequestDate,\r\n        requestDate,\r\n        error: undefined\r\n      });\r\n\r\n      localStorage.setItem(`${currentService}, ${receivedCity}`, [\r\n        currentService,\r\n        responseData[0],\r\n        responseData[1],\r\n        responseData[2],\r\n        responseData[3],\r\n        description,\r\n        fullRequestDate,\r\n        requestDate\r\n      ]);\r\n    } else {\r\n      this.updateState(storedWeather);\r\n    }\r\n    this.addVariation(currentService, receivedCity);\r\n  };\r\n\r\n  // if a variation of a city name is entered\r\n  addVariation = (service, city) => {\r\n    const searchedCity = document.forms.searchForm.city.value\r\n      .trim()\r\n      .toLowerCase();\r\n\r\n    if (searchedCity && searchedCity !== city) {\r\n      const weather = localStorage.getItem(`${service}, ${city}`);\r\n      const slicedWeather = weather.slice(0, weather.length);\r\n\r\n      localStorage.setItem(`${service}, ${city}`, [\r\n        slicedWeather,\r\n        searchedCity\r\n      ]);\r\n    }\r\n  };\r\n\r\n  // if weather is stored\r\n  updateState = storedWeather => {\r\n    const weather = storedWeather.split(\",\");\r\n\r\n    this.setState({\r\n      currentService: weather[0],\r\n      city: weather[1],\r\n      country: weather[2],\r\n      temperature: weather[3],\r\n      humidity: weather[4],\r\n      description: weather[5],\r\n      fullRequestDate: weather[6],\r\n      requestDate: weather[7],\r\n      error: undefined\r\n    });\r\n  };\r\n\r\n  changeService = () => {\r\n    const currentService =\r\n      this.state.currentService === this.state.services[0]\r\n        ? this.state.services[1]\r\n        : this.state.services[0];\r\n\r\n    localStorage.setItem(\"service\", currentService);\r\n    this.setState({ currentService });\r\n  };\r\n\r\n  changeCity = () => {\r\n    localStorage.setItem(\"city\", this.state.city.toLowerCase());\r\n    this.setState(this.state);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header>\r\n          <h1>Weathero</h1>\r\n        </header>\r\n\r\n        <main>\r\n          <Form\r\n            manualWeatherRequest={this.manualWeatherRequest}\r\n            currentService={this.state.currentService}\r\n            changeService={this.changeService}\r\n          />\r\n\r\n          <Result\r\n            city={this.state.city}\r\n            country={this.state.country}\r\n            changeCity={this.changeCity}\r\n            temperature={this.state.temperature}\r\n            humidity={this.state.humidity}\r\n            description={this.state.description}\r\n            fullRequestDate={this.state.fullRequestDate}\r\n            error={this.state.error}\r\n          />\r\n        </main>\r\n\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./containers/App/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Result\":\"Result_Result__8DFfA\",\"changeCityBtn\":\"Result_changeCityBtn__1dLYR\"};"],"sourceRoot":""}